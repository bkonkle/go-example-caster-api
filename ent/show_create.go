// Code generated by entc, DO NOT EDIT.

package ent

import (
	"caster/ent/episode"
	"caster/ent/show"
	"caster/utils"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShowCreate is the builder for creating a Show entity.
type ShowCreate struct {
	config
	mutation *ShowMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *ShowCreate) SetCreatedAt(t time.Time) *ShowCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ShowCreate) SetNillableCreatedAt(t *time.Time) *ShowCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ShowCreate) SetUpdatedAt(t time.Time) *ShowCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ShowCreate) SetNillableUpdatedAt(t *time.Time) *ShowCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetTitle sets the "title" field.
func (sc *ShowCreate) SetTitle(s string) *ShowCreate {
	sc.mutation.SetTitle(s)
	return sc
}

// SetSummary sets the "summary" field.
func (sc *ShowCreate) SetSummary(s string) *ShowCreate {
	sc.mutation.SetSummary(s)
	return sc
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (sc *ShowCreate) SetNillableSummary(s *string) *ShowCreate {
	if s != nil {
		sc.SetSummary(*s)
	}
	return sc
}

// SetPicture sets the "picture" field.
func (sc *ShowCreate) SetPicture(s string) *ShowCreate {
	sc.mutation.SetPicture(s)
	return sc
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (sc *ShowCreate) SetNillablePicture(s *string) *ShowCreate {
	if s != nil {
		sc.SetPicture(*s)
	}
	return sc
}

// SetContent sets the "content" field.
func (sc *ShowCreate) SetContent(u *utils.Content) *ShowCreate {
	sc.mutation.SetContent(u)
	return sc
}

// SetID sets the "id" field.
func (sc *ShowCreate) SetID(s string) *ShowCreate {
	sc.mutation.SetID(s)
	return sc
}

// AddEpisodeIDs adds the "episodes" edge to the Episode entity by IDs.
func (sc *ShowCreate) AddEpisodeIDs(ids ...string) *ShowCreate {
	sc.mutation.AddEpisodeIDs(ids...)
	return sc
}

// AddEpisodes adds the "episodes" edges to the Episode entity.
func (sc *ShowCreate) AddEpisodes(e ...*Episode) *ShowCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return sc.AddEpisodeIDs(ids...)
}

// Mutation returns the ShowMutation object of the builder.
func (sc *ShowCreate) Mutation() *ShowMutation {
	return sc.mutation
}

// Save creates the Show in the database.
func (sc *ShowCreate) Save(ctx context.Context) (*Show, error) {
	var (
		err  error
		node *Show
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ShowMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ShowCreate) SaveX(ctx context.Context) *Show {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ShowCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ShowCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ShowCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := show.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := show.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ShowCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Show.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Show.updated_at"`)}
	}
	if _, ok := sc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Show.title"`)}
	}
	if v, ok := sc.mutation.Title(); ok {
		if err := show.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Show.title": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Summary(); ok {
		if err := show.SummaryValidator(v); err != nil {
			return &ValidationError{Name: "summary", err: fmt.Errorf(`ent: validator failed for field "Show.summary": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Picture(); ok {
		if err := show.PictureValidator(v); err != nil {
			return &ValidationError{Name: "picture", err: fmt.Errorf(`ent: validator failed for field "Show.picture": %w`, err)}
		}
	}
	if v, ok := sc.mutation.ID(); ok {
		if err := show.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Show.id": %w`, err)}
		}
	}
	return nil
}

func (sc *ShowCreate) sqlSave(ctx context.Context) (*Show, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Show.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (sc *ShowCreate) createSpec() (*Show, *sqlgraph.CreateSpec) {
	var (
		_node = &Show{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: show.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: show.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: show.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: show.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: show.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := sc.mutation.Summary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: show.FieldSummary,
		})
		_node.Summary = value
	}
	if value, ok := sc.mutation.Picture(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: show.FieldPicture,
		})
		_node.Picture = value
	}
	if value, ok := sc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: show.FieldContent,
		})
		_node.Content = value
	}
	if nodes := sc.mutation.EpisodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   show.EpisodesTable,
			Columns: []string{show.EpisodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: episode.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ShowCreateBulk is the builder for creating many Show entities in bulk.
type ShowCreateBulk struct {
	config
	builders []*ShowCreate
}

// Save creates the Show entities in the database.
func (scb *ShowCreateBulk) Save(ctx context.Context) ([]*Show, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Show, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ShowMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ShowCreateBulk) SaveX(ctx context.Context) []*Show {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ShowCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ShowCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
