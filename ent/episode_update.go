// Code generated by entc, DO NOT EDIT.

package ent

import (
	"caster/ent/episode"
	"caster/ent/predicate"
	"caster/ent/show"
	"caster/utils"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// EpisodeUpdate is the builder for updating Episode entities.
type EpisodeUpdate struct {
	config
	hooks    []Hook
	mutation *EpisodeMutation
}

// Where appends a list predicates to the EpisodeUpdate builder.
func (eu *EpisodeUpdate) Where(ps ...predicate.Episode) *EpisodeUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *EpisodeUpdate) SetCreatedAt(t time.Time) *EpisodeUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableCreatedAt(t *time.Time) *EpisodeUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// SetUpdatedAt sets the "updated_at" field.
func (eu *EpisodeUpdate) SetUpdatedAt(t time.Time) *EpisodeUpdate {
	eu.mutation.SetUpdatedAt(t)
	return eu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableUpdatedAt(t *time.Time) *EpisodeUpdate {
	if t != nil {
		eu.SetUpdatedAt(*t)
	}
	return eu
}

// SetTitle sets the "title" field.
func (eu *EpisodeUpdate) SetTitle(s string) *EpisodeUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetSummary sets the "summary" field.
func (eu *EpisodeUpdate) SetSummary(s string) *EpisodeUpdate {
	eu.mutation.SetSummary(s)
	return eu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableSummary(s *string) *EpisodeUpdate {
	if s != nil {
		eu.SetSummary(*s)
	}
	return eu
}

// ClearSummary clears the value of the "summary" field.
func (eu *EpisodeUpdate) ClearSummary() *EpisodeUpdate {
	eu.mutation.ClearSummary()
	return eu
}

// SetPicture sets the "picture" field.
func (eu *EpisodeUpdate) SetPicture(s string) *EpisodeUpdate {
	eu.mutation.SetPicture(s)
	return eu
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (eu *EpisodeUpdate) SetNillablePicture(s *string) *EpisodeUpdate {
	if s != nil {
		eu.SetPicture(*s)
	}
	return eu
}

// ClearPicture clears the value of the "picture" field.
func (eu *EpisodeUpdate) ClearPicture() *EpisodeUpdate {
	eu.mutation.ClearPicture()
	return eu
}

// SetContent sets the "content" field.
func (eu *EpisodeUpdate) SetContent(u *utils.Content) *EpisodeUpdate {
	eu.mutation.SetContent(u)
	return eu
}

// ClearContent clears the value of the "content" field.
func (eu *EpisodeUpdate) ClearContent() *EpisodeUpdate {
	eu.mutation.ClearContent()
	return eu
}

// SetOwnerID sets the "owner" edge to the Show entity by ID.
func (eu *EpisodeUpdate) SetOwnerID(id string) *EpisodeUpdate {
	eu.mutation.SetOwnerID(id)
	return eu
}

// SetNillableOwnerID sets the "owner" edge to the Show entity by ID if the given value is not nil.
func (eu *EpisodeUpdate) SetNillableOwnerID(id *string) *EpisodeUpdate {
	if id != nil {
		eu = eu.SetOwnerID(*id)
	}
	return eu
}

// SetOwner sets the "owner" edge to the Show entity.
func (eu *EpisodeUpdate) SetOwner(s *Show) *EpisodeUpdate {
	return eu.SetOwnerID(s.ID)
}

// Mutation returns the EpisodeMutation object of the builder.
func (eu *EpisodeUpdate) Mutation() *EpisodeMutation {
	return eu.mutation
}

// ClearOwner clears the "owner" edge to the Show entity.
func (eu *EpisodeUpdate) ClearOwner() *EpisodeUpdate {
	eu.mutation.ClearOwner()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *EpisodeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EpisodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EpisodeUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EpisodeUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EpisodeUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *EpisodeUpdate) check() error {
	if v, ok := eu.mutation.Title(); ok {
		if err := episode.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Episode.title": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Summary(); ok {
		if err := episode.SummaryValidator(v); err != nil {
			return &ValidationError{Name: "summary", err: fmt.Errorf(`ent: validator failed for field "Episode.summary": %w`, err)}
		}
	}
	if v, ok := eu.mutation.Picture(); ok {
		if err := episode.PictureValidator(v); err != nil {
			return &ValidationError{Name: "picture", err: fmt.Errorf(`ent: validator failed for field "Episode.picture": %w`, err)}
		}
	}
	return nil
}

func (eu *EpisodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   episode.Table,
			Columns: episode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: episode.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: episode.FieldCreatedAt,
		})
	}
	if value, ok := eu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: episode.FieldUpdatedAt,
		})
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: episode.FieldTitle,
		})
	}
	if value, ok := eu.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: episode.FieldSummary,
		})
	}
	if eu.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: episode.FieldSummary,
		})
	}
	if value, ok := eu.mutation.Picture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: episode.FieldPicture,
		})
	}
	if eu.mutation.PictureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: episode.FieldPicture,
		})
	}
	if value, ok := eu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: episode.FieldContent,
		})
	}
	if eu.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: episode.FieldContent,
		})
	}
	if eu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.OwnerTable,
			Columns: []string{episode.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: show.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.OwnerTable,
			Columns: []string{episode.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: show.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{episode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// EpisodeUpdateOne is the builder for updating a single Episode entity.
type EpisodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EpisodeMutation
}

// SetCreatedAt sets the "created_at" field.
func (euo *EpisodeUpdateOne) SetCreatedAt(t time.Time) *EpisodeUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableCreatedAt(t *time.Time) *EpisodeUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// SetUpdatedAt sets the "updated_at" field.
func (euo *EpisodeUpdateOne) SetUpdatedAt(t time.Time) *EpisodeUpdateOne {
	euo.mutation.SetUpdatedAt(t)
	return euo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableUpdatedAt(t *time.Time) *EpisodeUpdateOne {
	if t != nil {
		euo.SetUpdatedAt(*t)
	}
	return euo
}

// SetTitle sets the "title" field.
func (euo *EpisodeUpdateOne) SetTitle(s string) *EpisodeUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetSummary sets the "summary" field.
func (euo *EpisodeUpdateOne) SetSummary(s string) *EpisodeUpdateOne {
	euo.mutation.SetSummary(s)
	return euo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableSummary(s *string) *EpisodeUpdateOne {
	if s != nil {
		euo.SetSummary(*s)
	}
	return euo
}

// ClearSummary clears the value of the "summary" field.
func (euo *EpisodeUpdateOne) ClearSummary() *EpisodeUpdateOne {
	euo.mutation.ClearSummary()
	return euo
}

// SetPicture sets the "picture" field.
func (euo *EpisodeUpdateOne) SetPicture(s string) *EpisodeUpdateOne {
	euo.mutation.SetPicture(s)
	return euo
}

// SetNillablePicture sets the "picture" field if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillablePicture(s *string) *EpisodeUpdateOne {
	if s != nil {
		euo.SetPicture(*s)
	}
	return euo
}

// ClearPicture clears the value of the "picture" field.
func (euo *EpisodeUpdateOne) ClearPicture() *EpisodeUpdateOne {
	euo.mutation.ClearPicture()
	return euo
}

// SetContent sets the "content" field.
func (euo *EpisodeUpdateOne) SetContent(u *utils.Content) *EpisodeUpdateOne {
	euo.mutation.SetContent(u)
	return euo
}

// ClearContent clears the value of the "content" field.
func (euo *EpisodeUpdateOne) ClearContent() *EpisodeUpdateOne {
	euo.mutation.ClearContent()
	return euo
}

// SetOwnerID sets the "owner" edge to the Show entity by ID.
func (euo *EpisodeUpdateOne) SetOwnerID(id string) *EpisodeUpdateOne {
	euo.mutation.SetOwnerID(id)
	return euo
}

// SetNillableOwnerID sets the "owner" edge to the Show entity by ID if the given value is not nil.
func (euo *EpisodeUpdateOne) SetNillableOwnerID(id *string) *EpisodeUpdateOne {
	if id != nil {
		euo = euo.SetOwnerID(*id)
	}
	return euo
}

// SetOwner sets the "owner" edge to the Show entity.
func (euo *EpisodeUpdateOne) SetOwner(s *Show) *EpisodeUpdateOne {
	return euo.SetOwnerID(s.ID)
}

// Mutation returns the EpisodeMutation object of the builder.
func (euo *EpisodeUpdateOne) Mutation() *EpisodeMutation {
	return euo.mutation
}

// ClearOwner clears the "owner" edge to the Show entity.
func (euo *EpisodeUpdateOne) ClearOwner() *EpisodeUpdateOne {
	euo.mutation.ClearOwner()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *EpisodeUpdateOne) Select(field string, fields ...string) *EpisodeUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Episode entity.
func (euo *EpisodeUpdateOne) Save(ctx context.Context) (*Episode, error) {
	var (
		err  error
		node *Episode
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EpisodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EpisodeUpdateOne) SaveX(ctx context.Context) *Episode {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *EpisodeUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EpisodeUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *EpisodeUpdateOne) check() error {
	if v, ok := euo.mutation.Title(); ok {
		if err := episode.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Episode.title": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Summary(); ok {
		if err := episode.SummaryValidator(v); err != nil {
			return &ValidationError{Name: "summary", err: fmt.Errorf(`ent: validator failed for field "Episode.summary": %w`, err)}
		}
	}
	if v, ok := euo.mutation.Picture(); ok {
		if err := episode.PictureValidator(v); err != nil {
			return &ValidationError{Name: "picture", err: fmt.Errorf(`ent: validator failed for field "Episode.picture": %w`, err)}
		}
	}
	return nil
}

func (euo *EpisodeUpdateOne) sqlSave(ctx context.Context) (_node *Episode, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   episode.Table,
			Columns: episode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: episode.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Episode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, episode.FieldID)
		for _, f := range fields {
			if !episode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != episode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: episode.FieldCreatedAt,
		})
	}
	if value, ok := euo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: episode.FieldUpdatedAt,
		})
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: episode.FieldTitle,
		})
	}
	if value, ok := euo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: episode.FieldSummary,
		})
	}
	if euo.mutation.SummaryCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: episode.FieldSummary,
		})
	}
	if value, ok := euo.mutation.Picture(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: episode.FieldPicture,
		})
	}
	if euo.mutation.PictureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: episode.FieldPicture,
		})
	}
	if value, ok := euo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: episode.FieldContent,
		})
	}
	if euo.mutation.ContentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: episode.FieldContent,
		})
	}
	if euo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.OwnerTable,
			Columns: []string{episode.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: show.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   episode.OwnerTable,
			Columns: []string{episode.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: show.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Episode{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{episode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
