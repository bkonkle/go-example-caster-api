// Code generated by entc, DO NOT EDIT.

package ent

import (
	"caster/ent/show"
	"caster/utils"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Show is the model entity for the Show schema.
type Show struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// Picture holds the value of the "picture" field.
	Picture string `json:"picture,omitempty"`
	// Content holds the value of the "content" field.
	Content *utils.Content `json:"content,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ShowQuery when eager-loading is set.
	Edges ShowEdges `json:"edges"`
}

// ShowEdges holds the relations/edges for other nodes in the graph.
type ShowEdges struct {
	// Episodes holds the value of the episodes edge.
	Episodes []*Episode `json:"episodes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EpisodesOrErr returns the Episodes value or an error if the edge
// was not loaded in eager-loading.
func (e ShowEdges) EpisodesOrErr() ([]*Episode, error) {
	if e.loadedTypes[0] {
		return e.Episodes, nil
	}
	return nil, &NotLoadedError{edge: "episodes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Show) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case show.FieldContent:
			values[i] = new([]byte)
		case show.FieldID, show.FieldTitle, show.FieldSummary, show.FieldPicture:
			values[i] = new(sql.NullString)
		case show.FieldCreatedAt, show.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Show", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Show fields.
func (s *Show) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case show.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				s.ID = value.String
			}
		case show.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		case show.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				s.UpdatedAt = value.Time
			}
		case show.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				s.Title = value.String
			}
		case show.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				s.Summary = value.String
			}
		case show.FieldPicture:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field picture", values[i])
			} else if value.Valid {
				s.Picture = value.String
			}
		case show.FieldContent:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Content); err != nil {
					return fmt.Errorf("unmarshal field content: %w", err)
				}
			}
		}
	}
	return nil
}

// QueryEpisodes queries the "episodes" edge of the Show entity.
func (s *Show) QueryEpisodes() *EpisodeQuery {
	return (&ShowClient{config: s.config}).QueryEpisodes(s)
}

// Update returns a builder for updating this Show.
// Note that you need to call Show.Unwrap() before calling this method if this Show
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Show) Update() *ShowUpdateOne {
	return (&ShowClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Show entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Show) Unwrap() *Show {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Show is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Show) String() string {
	var builder strings.Builder
	builder.WriteString("Show(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(s.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(s.Title)
	builder.WriteString(", summary=")
	builder.WriteString(s.Summary)
	builder.WriteString(", picture=")
	builder.WriteString(s.Picture)
	builder.WriteString(", content=")
	builder.WriteString(fmt.Sprintf("%v", s.Content))
	builder.WriteByte(')')
	return builder.String()
}

// Shows is a parsable slice of Show.
type Shows []*Show

func (s Shows) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
