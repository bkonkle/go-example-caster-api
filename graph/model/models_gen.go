// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

// The `CreateEpisodeInput` input type
type CreateEpisodeInput struct {
	// The Episode's title
	Title string `json:"title"`
	// The Episode's description summary
	Summary *string `json:"summary"`
	// The Episode's picture
	Picture *string `json:"picture"`
	// The Episode json content
	Content *string `json:"content"`
	// The Episode's Show id
	ShowID string `json:"showId"`
}

// The `CreateProfileInput` input type
type CreateProfileInput struct {
	// The Profile's email address
	Email string `json:"email"`
	// The Profile's display name
	DisplayName *string `json:"displayName"`
	// The Profile's picture
	Picture *string `json:"picture"`
	// The Profile json content
	Content *string `json:"content"`
	// The Profile's city
	City *string `json:"city"`
	// The Profile's state or province
	StateProvince *string `json:"stateProvince"`
	// The Profile's User id
	UserID string `json:"userId"`
}

// The `CreateShowInput` input type
type CreateShowInput struct {
	// The Show's title
	Title string `json:"title"`
	// The Show's description summary
	Summary *string `json:"summary"`
	// The Show's picture
	Picture *string `json:"picture"`
	// The Show json content
	Content *string `json:"content"`
}

// The `CreateUserInput` input type
type CreateUserInput struct {
	// The User's profile
	Profile *CreateUserProfileInput `json:"profile"`
}

// The `CreateUserProfileInput` input type
type CreateUserProfileInput struct {
	// The Profile's email address
	Email string `json:"email"`
	// The Profile's display name
	DisplayName *string `json:"displayName"`
	// The Profile's picture
	Picture *string `json:"picture"`
	// The Profile json content
	Content *string `json:"content"`
	// The Profile's city
	City *string `json:"city"`
	// The Profile's state or province
	StateProvince *string `json:"stateProvince"`
}

// The User GraphQL and Database Model
type Episode struct {
	// The Episode id
	ID string `json:"id"`
	// The date the Episode was created
	CreatedAt string `json:"createdAt"`
	// The date the Episode was last updated
	UpdatedAt string `json:"updatedAt"`
	// The Episode title
	Title string `json:"title"`
	// An optional Episode summary
	Summary *string `json:"summary"`
	// An optional Episode image
	Picture *string `json:"picture"`
	// Optional Json content for a Episode
	Content *string `json:"content"`
	// The Episode's Show id
	ShowID string `json:"showId"`
	Show   *Show  `json:"show"`
}

// Conditions to filter Episode listings by
type EpisodeCondition struct {
	// The `Episode`'s title
	Title *string `json:"title"`
	// The associated Show
	ShowID *string `json:"showId"`
}

// The `EpisodesPage` result type
type EpisodesPage struct {
	// The list of `Episodes` returned for the current page
	Data []*Episode `json:"data"`
	// The number of `Episodes` returned for the current page
	Count int `json:"count"`
	// Tne total number of `Episodes` available
	Total int `json:"total"`
	// The current page
	Page int `json:"page"`
	// The number of pages available
	PageCount int `json:"pageCount"`
}

// The `RoleGrant` GraphQL and Database Model
type Model struct {
	// The RoleGrant id
	ID string `json:"id"`
	// The date the RoleGrant was created
	CreatedAt string `json:"createdAt"`
	// The date the RoleGrant was last updated
	UpdatedAt string `json:"updatedAt"`
	// The key of the Role being granted to the Role
	RoleKey string `json:"roleKey"`
	// The User id that the Role is being granted to
	UserID string `json:"userId"`
	// The table of the resource that the Role is being granted for
	ResourceTable string `json:"resourceTable"`
	// The id of the resource that the Role is being granted for
	ResourceID string `json:"resourceId"`
}

// The `MutateEpisodeResult` type
type MutateEpisodeResult struct {
	// The Episode's subscriber id
	Episode *Episode `json:"episode"`
}

// The `MutateProfileResult` type
type MutateProfileResult struct {
	// The Profile's subscriber id
	Profile *Profile `json:"profile"`
}

// The `MutateShowResult` type
type MutateShowResult struct {
	// The Show's subscriber id
	Show *Show `json:"show"`
}

// The `MutateUserResult` input type
type MutateUserResult struct {
	// The User's subscriber id
	User *User `json:"user"`
}

// The `Profile` GraphQL model
type Profile struct {
	// The `Profile` id
	ID string `json:"id"`
	// The date the `Profile` was created
	CreatedAt string `json:"createdAt"`
	// The date the `Profile` was last updated
	UpdatedAt string `json:"updatedAt"`
	// The `Profile`'s email address
	Email *string `json:"email"`
	// The `Profile`'s display name
	DisplayName *string `json:"displayName"`
	// The `Profile`'s picture
	Picture *string `json:"picture"`
	// The `Profile` json content
	Content *string `json:"content"`
	// The `Profile`'s city
	City *string `json:"city"`
	// The `Profile`'s state or province
	StateProvince *string `json:"stateProvince"`
	// The `Profile`'s `User` id
	UserID *string `json:"userId"`
	User   *User   `json:"user"`
}

// Conditions to filter Profile listings by
type ProfileCondition struct {
	// The `Profile`'s email address
	Email *string `json:"email"`
	// The `Profile`'s display name
	DisplayName *string `json:"displayName"`
	// The `Profile`'s city
	City *string `json:"city"`
	// The `Profile`'s state or province
	StateProvince *string `json:"stateProvince"`
	// The `Profile`'s User id
	UserID *string `json:"userId"`
}

// The `ProfilesPage` result type
type ProfilesPage struct {
	// The list of `Profiles` returned for the current page
	Data []*Profile `json:"data"`
	// The number of `Profiles` returned for the current page
	Count int `json:"count"`
	// Tne total number of `Profiles` available
	Total int `json:"total"`
	// The current page
	Page int `json:"page"`
	// The number of pages available
	PageCount int `json:"pageCount"`
}

// The Show GraphQL and Database Model
type Show struct {
	// The Show id
	ID string `json:"id"`
	// The date the Show was created
	CreatedAt string `json:"createdAt"`
	// The date the Show was last updated
	UpdatedAt string `json:"updatedAt"`
	// The Show title
	Title string `json:"title"`
	// An optional Show summary
	Summary *string `json:"summary"`
	// An optional Show image
	Picture *string `json:"picture"`
	// Optional Json content for a Show
	Content *string `json:"content"`
}

// Conditions to filter Show listings by
type ShowCondition struct {
	// The `Show`'s title
	Title *string `json:"title"`
}

// The `ShowsPage` result type
type ShowsPage struct {
	// The list of `Shows` returned for the current page
	Data []*Show `json:"data"`
	// The number of `Shows` returned for the current page
	Count int `json:"count"`
	// Tne total number of `Shows` available
	Total int `json:"total"`
	// The current page
	Page int `json:"page"`
	// The number of pages available
	PageCount int `json:"pageCount"`
}

// The `UpdateEpisodeInput` input type
type UpdateEpisodeInput struct {
	// The Episode's title
	Title *string `json:"title"`
	// The Episode's description summary
	Summary *string `json:"summary"`
	// The Episode's picture
	Picture *string `json:"picture"`
	// The Episode json content
	Content *string `json:"content"`
	// The Episode's Show id
	ShowID *string `json:"showId"`
}

// The `UpdateProfileInput` input type
type UpdateProfileInput struct {
	// The Profile's email address
	Email *string `json:"email"`
	// The Profile's display name
	DisplayName *string `json:"displayName"`
	// The Profile's picture
	Picture *string `json:"picture"`
	// The Profile json content
	Content *string `json:"content"`
	// The Profile's city
	City *string `json:"city"`
	// The Profile's state or province
	StateProvince *string `json:"stateProvince"`
	// The Profile's User id
	UserID *string `json:"userId"`
}

// The `UpdateShowInput` input type
type UpdateShowInput struct {
	// The Show's title
	Title *string `json:"title"`
	// The Show's description summary
	Summary *string `json:"summary"`
	// The Show's picture
	Picture *string `json:"picture"`
	// The Show json content
	Content *string `json:"content"`
}

// The `UpdateUserInput` input type
type UpdateUserInput struct {
	// The User's subscriber id
	Username *string `json:"username"`
	// Whether the User is active or disabled
	IsActive *bool `json:"isActive"`
}

// The User GraphQL and Database Model
type User struct {
	// The User id
	ID string `json:"id"`
	// The date the User was created
	CreatedAt string `json:"createdAt"`
	// The date the User was last updated
	UpdatedAt string `json:"updatedAt"`
	// The User's subscriber id
	Username string `json:"username"`
	// Whether the User is active or disabled
	IsActive bool `json:"isActive"`
	// Related RoleGrants
	Roles []*Model `json:"roles"`
}

// The available ordering values
type EpisodesOrderBy string

const (
	EpisodesOrderByIDAsc         EpisodesOrderBy = "ID_ASC"
	EpisodesOrderByIDDesc        EpisodesOrderBy = "ID_DESC"
	EpisodesOrderByTitleAsc      EpisodesOrderBy = "TITLE_ASC"
	EpisodesOrderByTitleDesc     EpisodesOrderBy = "TITLE_DESC"
	EpisodesOrderByShowIDAsc     EpisodesOrderBy = "SHOW_ID_ASC"
	EpisodesOrderByShowIDDesc    EpisodesOrderBy = "SHOW_ID_DESC"
	EpisodesOrderByCreatedAtAsc  EpisodesOrderBy = "CREATED_AT_ASC"
	EpisodesOrderByCreatedAtDesc EpisodesOrderBy = "CREATED_AT_DESC"
	EpisodesOrderByUpdatedAtAsc  EpisodesOrderBy = "UPDATED_AT_ASC"
	EpisodesOrderByUpdatedAtDesc EpisodesOrderBy = "UPDATED_AT_DESC"
)

var AllEpisodesOrderBy = []EpisodesOrderBy{
	EpisodesOrderByIDAsc,
	EpisodesOrderByIDDesc,
	EpisodesOrderByTitleAsc,
	EpisodesOrderByTitleDesc,
	EpisodesOrderByShowIDAsc,
	EpisodesOrderByShowIDDesc,
	EpisodesOrderByCreatedAtAsc,
	EpisodesOrderByCreatedAtDesc,
	EpisodesOrderByUpdatedAtAsc,
	EpisodesOrderByUpdatedAtDesc,
}

func (e EpisodesOrderBy) IsValid() bool {
	switch e {
	case EpisodesOrderByIDAsc, EpisodesOrderByIDDesc, EpisodesOrderByTitleAsc, EpisodesOrderByTitleDesc, EpisodesOrderByShowIDAsc, EpisodesOrderByShowIDDesc, EpisodesOrderByCreatedAtAsc, EpisodesOrderByCreatedAtDesc, EpisodesOrderByUpdatedAtAsc, EpisodesOrderByUpdatedAtDesc:
		return true
	}
	return false
}

func (e EpisodesOrderBy) String() string {
	return string(e)
}

func (e *EpisodesOrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = EpisodesOrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid EpisodesOrderBy", str)
	}
	return nil
}

func (e EpisodesOrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The available ordering values
type ProfilesOrderBy string

const (
	ProfilesOrderByIDAsc           ProfilesOrderBy = "ID_ASC"
	ProfilesOrderByIDDesc          ProfilesOrderBy = "ID_DESC"
	ProfilesOrderByEmailAsc        ProfilesOrderBy = "EMAIL_ASC"
	ProfilesOrderByEmailDesc       ProfilesOrderBy = "EMAIL_DESC"
	ProfilesOrderByDisplayNameAsc  ProfilesOrderBy = "DISPLAY_NAME_ASC"
	ProfilesOrderByDisplayNameDesc ProfilesOrderBy = "DISPLAY_NAME_DESC"
	ProfilesOrderByCreatedAtAsc    ProfilesOrderBy = "CREATED_AT_ASC"
	ProfilesOrderByCreatedAtDesc   ProfilesOrderBy = "CREATED_AT_DESC"
	ProfilesOrderByUpdatedAtAsc    ProfilesOrderBy = "UPDATED_AT_ASC"
	ProfilesOrderByUpdatedAtDesc   ProfilesOrderBy = "UPDATED_AT_DESC"
)

var AllProfilesOrderBy = []ProfilesOrderBy{
	ProfilesOrderByIDAsc,
	ProfilesOrderByIDDesc,
	ProfilesOrderByEmailAsc,
	ProfilesOrderByEmailDesc,
	ProfilesOrderByDisplayNameAsc,
	ProfilesOrderByDisplayNameDesc,
	ProfilesOrderByCreatedAtAsc,
	ProfilesOrderByCreatedAtDesc,
	ProfilesOrderByUpdatedAtAsc,
	ProfilesOrderByUpdatedAtDesc,
}

func (e ProfilesOrderBy) IsValid() bool {
	switch e {
	case ProfilesOrderByIDAsc, ProfilesOrderByIDDesc, ProfilesOrderByEmailAsc, ProfilesOrderByEmailDesc, ProfilesOrderByDisplayNameAsc, ProfilesOrderByDisplayNameDesc, ProfilesOrderByCreatedAtAsc, ProfilesOrderByCreatedAtDesc, ProfilesOrderByUpdatedAtAsc, ProfilesOrderByUpdatedAtDesc:
		return true
	}
	return false
}

func (e ProfilesOrderBy) String() string {
	return string(e)
}

func (e *ProfilesOrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProfilesOrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProfilesOrderBy", str)
	}
	return nil
}

func (e ProfilesOrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

// The available ordering values
type ShowsOrderBy string

const (
	ShowsOrderByIDAsc         ShowsOrderBy = "ID_ASC"
	ShowsOrderByIDDesc        ShowsOrderBy = "ID_DESC"
	ShowsOrderByTitleAsc      ShowsOrderBy = "TITLE_ASC"
	ShowsOrderByTitleDesc     ShowsOrderBy = "TITLE_DESC"
	ShowsOrderByCreatedAtAsc  ShowsOrderBy = "CREATED_AT_ASC"
	ShowsOrderByCreatedAtDesc ShowsOrderBy = "CREATED_AT_DESC"
	ShowsOrderByUpdatedAtAsc  ShowsOrderBy = "UPDATED_AT_ASC"
	ShowsOrderByUpdatedAtDesc ShowsOrderBy = "UPDATED_AT_DESC"
)

var AllShowsOrderBy = []ShowsOrderBy{
	ShowsOrderByIDAsc,
	ShowsOrderByIDDesc,
	ShowsOrderByTitleAsc,
	ShowsOrderByTitleDesc,
	ShowsOrderByCreatedAtAsc,
	ShowsOrderByCreatedAtDesc,
	ShowsOrderByUpdatedAtAsc,
	ShowsOrderByUpdatedAtDesc,
}

func (e ShowsOrderBy) IsValid() bool {
	switch e {
	case ShowsOrderByIDAsc, ShowsOrderByIDDesc, ShowsOrderByTitleAsc, ShowsOrderByTitleDesc, ShowsOrderByCreatedAtAsc, ShowsOrderByCreatedAtDesc, ShowsOrderByUpdatedAtAsc, ShowsOrderByUpdatedAtDesc:
		return true
	}
	return false
}

func (e ShowsOrderBy) String() string {
	return string(e)
}

func (e *ShowsOrderBy) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ShowsOrderBy(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ShowsOrderBy", str)
	}
	return nil
}

func (e ShowsOrderBy) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
